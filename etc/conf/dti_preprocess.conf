#! /bin/bash
#  Unwarping of B0 inhomogeneity distortion, correction of eddy current distortion and motion, tensor calculation and QA using FSL
#  Takuya Hayashi, Center for Life Science Technologies, RIKEN (takuya.hayashi@riken.jp, takuya.hayashi@gmail.com), Kobe, JP

VERSION="2.0" # released on Sat, 02 Jan 2016 01:42:26 +0900

#########################################################
# Default environments                                  #
#########################################################
FSLDIR=/usr/local/fsl
#EDDY=${FSLDIR}/bin/eddy  # location of eddy
EDDY=/mnt/FAI1/devel/fsl-5.0.10/bin/eddy # location of eddy
if [ "$SPECIES" = "Human" ] || [ "$SPECIES" = "" ] ; then 
 HCPEnvironmentScript="/mnt/FAI1/devel/git/Pipelines/Examples/Scripts/SetUpHCPPipeline_RIKEN.sh"
else
 HCPEnvironmentScript="/mnt/FAI1/devel/NHPHCPPipelines/Examples/Scripts/SetUpHCPPipeline_RIKEN.sh"
fi
source $HCPEnvironmentScript
#########################################################
# usually not needed to be modified below               #
#########################################################
source ${FSLDIR}/etc/fslconf/fsl.sh
PATH=${FSLDIR}/bin:${PATH}
export FSLDIR PATH

#########################################################
# Default values                                        #
#########################################################
ud=y-;		         # default undistortion direction
outdirsuffix=dtiprep;    # default suffix for output dirname
tmpdir=dti_preprocess;   # default dir to save intermediate files
reportdir=report;        # report dir
LF=$reportdir/log.html;  # log filename
reg=1; 		         # registration between dti and fieldmap
refvol=0;	         # reference volume for motion correcion and eddy current distortion
test=0;                  # test or full calc
FORCEDIR=0;              # Use the actual directory name given (i.e. do not add + to make a new directory)
bvec_ecc=0;              # correction of bvector file using rotation parameter
FC=1                     # fieldmap correcion none (0), using Fugue (1) or Topup (2)
EC=1                     # eddy_current correction none (0), using Eddy_correct (1) or Eddy (2)
FLIRT=1;                 # use Flirt (1) or Mcflirt (0) for eddy_correct
MCFLIRT=3;               # number of step in mcflirt
totalreadouttime=1       # Echo spacing (ms) * 0.001 * (EPI factor - 1) 
fwhm="--fwhm=0"          # Eddy default
INTERP=spline            # interplation method in flirt
lut=${DTI_PREPROCESS}/etc/luts/rainbow.lut  #lut
lutpng=${DTI_PREPROCESS}/etc/luts/rainbow.png 
v=0                      # verbose

#########################################################
# Functions                                             #
#########################################################

usage_exit() {
      cat <<EOF

  DTI calculation and QC with correction for motion and distortion

  Version `echo "$VERSION" | awk '{print $1}'`

  Usage 1: Minimal data-based correction (using eddy_correct)

    $CMD -k <dwi> -b <bvals> -r <bvecs> [option]

    -k <dwi>        : dwi 4D data
    -b <bvals>      : a text file containing a list of b-values
    -r <bvecs>      : a text file containing a list of b-vectors
          
  Usage 2: Data-based correction (using fieldmap, fugue and eddy_correct)

   2.1  Run fieldmap correction only :

    $CMD -k <dwi> -t <num> -f <img> -m <img> [option]

   2.2  Run both fieldmap and eddy-current correction :

    $CMD -k <dwi> -b <bvals> -r <bvecs> -t <num> -f <img> -m <img> [option]

    -t <num>        : dwell time (ms) of dwi in phase-encoding direction (divided by accerelation factor)
    -f <img>        : B0 fieldmap image (radian/sec)
    -m <img>        : B0 fieldmap magnitude image

    Options: 
    -u <x, x-, y, y-, z, or z->  : unwarp direction (default: y-)
    -D <img>        : mask file for dti image (by default, this is calculated by bet)
    -M <img>        : mask file for fieldmap magnitude image (by default, this is calculated by bet)
    -E <num>        : reference volume (default : 0th volume)
    -n              : do not register between fieldmap and dti data (requires to register beforehand)
    -U              : do not mask DTI images

  Usage 3: Model-based correction (using blip-up and down data, topup and eddy)
   
   3.1  Run fieldmap correction only :

    $CMD -k <dwi> -K <dwi-PER> -t <num> [options]

   3.2  Run both fieldmap and eddy-current correction :

    $CMD -k <dwi> -b <bvals> -r <bvecs> -K <dwi-PER> -B <bvals-PER> -R <bvecs-PER> -t <num> [options]

    -K <dwi-PER>    : dwi 4D data with phase-encode reversed (PER)
    -B <bvals-PER>  : bvals for dwi-PER
    -R <bvecs-PER>  : bvecs for dwi-PER
    -t <num>        : dwll time (ms) of dwi in phase-encoding direction
   
    Options:
    -u <x or y>     : phase-reversed direction (default: y)
    -p              : optimized for single-shell data
    -w              : potentially better converge if there is substantial subject movement

  General options applied for all usages:
    -o <dir>        : output directory (default is <dwi 4D data>.prep)
    -F              : use the actual directory name given (i.e. do not add + to make a new directory)
    -c              : use mcflirt instead of flirt (faster but may not be accurate)
    -H <HCP subject dir> : registeter to HCP pipelined directory and run QA
    -v              : verbose
    -h              : output help page



EOF
    exit 1;
}

Exit () {
    cd $CWD
    exit 1;
}

make_absolute (){
    file=$1
    if [ "`echo ${file} | head -c 1`" = "/" ]; then abs=${file}; else abs=${PWD}/${file}; fi
    echo $abs 
}

test_varimg (){
    var=$1
    if [ "x$var" = "x" ]; then test=0; else  test=`imtest $1`; fi
    echo $test
}

test_varfile (){
    var=$1
    if [ "x$var" = "x" ]; then test=0 ; elif [ ! -f $var ]; then test=0; else test=1; fi
    echo $test
}

threecolumnmeansd () {
    mean=`cat $1 | awk 'BEGIN {x=0;y=0;z=0;N=0};{x=x+$1;y=y+$2;z=z+$3;N=N+1}END {printf("%f, %f, %f",x/N,y/N,z/N)}'`
    xm=`echo $mean | awk '{print $1}'`; ym=`echo $mean | awk '{print $2}'`; zm=`echo $mean | awk '{print $3}'`
    sd=`cat $1 | awk 'BEGIN {x=0;y=0;z=0;N=0};{x=x+($1-"$xm")^2;y=y+($2-"$ym")^2;z=z+($3-"$zm")^2;N=N+1}END {printf("%f, %f, %f",sqrt(x/N),sqrt(y/N),sqrt(z/N))}'`
    echo $mean $sd
}
	
T () {
  if [ $v = 1 ] ; then
    E=0; if [ "$1" = "-e" ] ; then E=1; shift ; fi; cmd="$*"; echo "$*"; echo "$*" >> $LF; if [ "$E" != "1" ] ; then $cmd 2>&1 | tee -a $LF; fi; echo "" 2>&1 | tee -a $LF
  else 
    E=0; if [ "$1" = "-e" ] ; then E=1; shift ; fi; cmd="$*"; echo "$*" >> $LF; if [ "$E" != "1" ] ; then $cmd >> $LF 2>&1; fi; echo "" >> $LF
  fi
}

finish_dti_preprocess () {
T imrm $tmpdir/grot $tmpdir/dti_ecc $tmpdir/nodif_* $tmpdir/nodifmerge* $tmpdir/nodifstd* grot*
T -e "Finished $CMD at `date +'%Y-%m-%d %H:%M:%S %z'`"
echo "</pre>" >> $reportdir/log.html
cd $CWD
exit 0
}


