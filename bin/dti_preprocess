#! /bin/bash
#  Unwarping of B0 inhomogeneity distortion, correction of eddy current distortion and motion, tensor calculation and QA using FSL
#  Takuya Hayashi, Brain Connectomics Imaging Lab (BCIL), RIKEN (takuya.hayashi@riken.jp, takuya.hayashi@gmail.com), Kobe, JP

#########################################################
# Configuration                                         #
#########################################################
CMD=`echo $0 | sed -e 's/^\(.*\)\/\([^\/]*\)/\2/'`
inparg="$@";
CWD=`pwd`

if [ "x$DTI_PREPROCESS" = "x" ] ; then
 echo "ERROR: cannot find environment variable DTI_PREPROCESS.";
 exit 1;
else
 source ${DTI_PREPROCESS}/etc/conf/dti_preprocess.conf
fi

#########################################################
# Parse arguments                                       #
#########################################################
[ "$6" = "" ] && usage_exit

while getopts k:t:f:m:b:r:u:D:M:o:FE:l4nUK:B:R:pwcH:N:vh OPT
 do
 case "$OPT" in
   "k" ) dti="`make_absolute $OPTARG`";;
   "t" ) esp="`echo "scale=5; $OPTARG/1000" | bc`";;
   "f" ) dph="`make_absolute $OPTARG`";;
   "m" ) mag="`make_absolute $OPTARG`";;
   "b" ) bval="`make_absolute $OPTARG`";;
   "r" ) bvec="`make_absolute $OPTARG`";;
   "u" ) ud="$OPTARG";;
   "D" ) maskd="`make_absolute $OPTARG`";;
   "M" ) maskf="`make_absolute $OPTARG`";;
   "o" ) outdir="`make_absolute $OPTARG`";;
   "F" ) FORCEDIR=1;;
   "E" ) refvol="$OPTARG";;
   "n" ) reg=0;;
   "U" ) unmaskd=1;;
   "K" ) dtir="`make_absolute $OPTARG`";;
   "B" ) bvalr="`make_absolute $OPTARG`";;
   "R" ) bvecr="`make_absolute $OPTARG`";;
   "p" ) dontpeas="--dont_peas";;
   "w" ) fwhm="--fwhm=10,0,0,0,0";;
   "c" ) FLIRT=0;;
   "H" ) hcp="`make_absolute $OPTARG`";;
   "N" ) noddi="$OPTARG";;
   "v" ) v=1;;
   "h" ) usage_exit;;
    * )  usage_exit;;
 esac
done;

if [ `test_varimg $dti` -eq 0 ]; then echo "ERROR: cannot find image for dti 4D data"; exit 1; fi
dtidim4=`fslval $dti dim4`

# Set FC (fieldmap correction)
if [ "$dtir" = "" ] ; then
 if [ "$dph" = "" ] && [ "$mag" = "" ] ; then
  FC=0;
 else
  FC=1
  if [ `test_varimg $dph` -eq 0 ]; then echo "ERROR: cannot find image for B0 fieldmap"; exit 1; fi
  if [ `test_varimg $mag` -eq 0 ]; then echo "ERROR: cannot find image for B0 fieldmap magnitude"; exit 1; fi
  if [ "x${esp}" = "x" ]; then echo "Cannot find option -t (echo space time)...exit."; exit 1;fi
 fi;
else
 FC=2;
 if [ `test_varimg $dtir` -eq 0 ]; then echo "ERROR: cannot find image for dti 4D data"; exit 1; fi
 dtirdim4=`fslval $dtir dim4`
 if [ "$ud" = "y-" ] ; then ud=y;fi # default ud=y for topup
 if [ "$ud" != "x" ] && [ "$ud" != "y" ]; then echo "Phase-reversed direction should be x or y when using topup...exit."; exit 1;fi
fi

if [ "x$maskf" != "x" ]; then
   if [ `test_varimg $maskf` -eq 0 ]; then echo "ERROR: cannot find image: $maskf"; exit 1; fi;
fi

if [ "x$maskd" != "x" ]; then
   if [ `test_varimg $maskd` -eq 0 ]; then echo "ERROR: cannot find image: $maskd"; exit 1; fi
fi

# Set EC (eddy currenct distortion correction)
if [ "$bvec" = "" ] && [ "$bval" = "" ] ;  then
    EC=0;
else
  if [ $FC != 2 ] ; then
    EC=1;
    if [ `test_varfile $bvec` -eq 0 ]; then echo "ERROR: no bvecs file specified"; exit 1;fi
    bvecl=`cat $bvec | awk 'END{print NR}'`; bvecw=`cat $bvec | wc -w`
    if [ $bvecl != 3 ]; then echo "ERROR: bvecs file contains $bvecl lines, it should be 3 lines, each for x, y, z"; exit 1;fi
    if [ $bvecw != `echo 3*$dtidim4 | bc` ]; then echo "ERROR: bvecs file contains $bvecw words, it should be 3 x $dtidim4 words"; exit 1;fi
    if [ `test_varfile $bval` -eq 0 ]; then echo "ERROR: no bvals file specified"; exit 1;fi
    bvall=`cat $bval | awk 'END{print NR}'`; bvalw=`cat $bval | wc -w`
    if [ $bvall != 1 ]; then echo "ERROR: bvals file contains $bvall lines, it should be 1 lines"; exit 1;fi
    if [ $bvalw != $dtidim4 ]; then echo "ERROR: bvalc file contains $bvalw words, it should be $dtidim4 words"; exit 1;fi
  else
    EC=2;
    if [ "$bvecr" = "" ] ; then echo "Cannot find option -R...exit."; exit 1;fi
    if [ "$bvalr" = "" ] ; then echo "Cannot find option -B...exit."; exit 1;fi
  fi
fi

# Check other variables
if [ "$outdir" = "" ] ; then
 outdir=`remove_ext ${dti}`.${outdirsuffix};
fi
if [ "$FORCEDIR" = 0 ] ; then
 while [ -e $outdir ]; do outdir=${outdir}+; done;
 mkdir -p $outdir;
elif [ "$FORCEDIR" = 1 ] ; then
 if [ -e $outdir ]; then
  if [ ! -w $outdir ] ; then
   echo "ERROR: cannot create $outdir";
   exit 1;
  fi
  \rm  -rf $outdir/dti_preprocess $outdir/report;
  for i in data nodif nodif_brain nodif_brain_mask field_rads field_mag data dti_FA dti_V1 dti_V2 dti_V3 dti_L1 dti_L2 dti_L3 dti_S0 dti_MD dti_MO dti_sse; do imrm $outdir/$i; done
  \rm -rf $outdir/bvecs $outdir/bvals
 fi
 mkdir -p $outdir;
fi;

#########################################################
# Preparation                                           #
#########################################################
trap Exit 2
cd $outdir
mkdir -p $tmpdir
if [ -e $reportdir ]; then /bin/rm -Rf $reportdir;fi
mkdir -p $reportdir
mkdir -p .files; /bin/cat ${FSLDIR}/doc/fsl.css > .files/fsl.css;
/bin/cp $DTI_PREPROCESS/etc/conf/logo.png $reportdir

if [ -e report.html ]; then rm report.html;fi
touch report.html
echo "<HTML><HEAD><link REL=\"stylesheet\" TYPE=\"text/css\" href=\".files/fsl.css\"><TITLE>DTI_PREPROCESS REPORT</TITLE></HEAD><BODY BGCOLOR=\"#778899\" TEXT=\"#151515\">" >> report.html
echo "<hr><img src=./report/logo.png style=\"border:none; width:120px;height:90px;float:right;\"><B>DTI_PREPROCESS REPORT</B><BR>" >> report.html
echo "<I>DTI calculation and QA with correction for motion and distortion</I><BR>" >> report.html
echo "<FONT size=1>Version $VERSION &copy;2006-2016 Takuya Hayashi, RIKEN CLST</FONT><BR><BR>"  >> report.html
echo "<Font size=2>Output directory:$outdir</FONT><BR>"  >> report.html

echo "<HTML><HEAD><link REL=\"stylesheet\" TYPE=\"text/css\" href=\"../.files/fsl.css\"><TITLE>DTI_PREPROCESS REPORT</TITLE></HEAD><BODY BGCOLOR=\"#778899\" TEXT=\"#151515\">" >> $reportdir/fieldmap.html
echo "<hr><img src=./logo.png style=\"border:none; width:120px;height:90px;float:right;\"><B>DTI_PREPROCESS REPORT</B><BR>"  >> $reportdir/fieldmap.html
echo "<I>DTI calculation and QA with correction for motion and distortion</I><BR>" >>  $reportdir/fieldmap.html
echo "<FONT size=1>Version $VERSION &copy;2006-2016 Takuya Hayashi, RIKEN CLST</FONT><BR><BR>" >>  $reportdir/fieldmap.html
echo "<FONT size=2>Output directory:$outdir</FONT><BR>" >> $reportdir/fieldmap.html

/bin/cat $reportdir/fieldmap.html > $reportdir/stats.html
/bin/cat $reportdir/fieldmap.html > $reportdir/motion.html
/bin/cat $reportdir/fieldmap.html > $reportdir/bvecbval.html
/bin/cat $reportdir/fieldmap.html > $reportdir/input.html
/bin/cat $reportdir/fieldmap.html > $reportdir/log.html

echo "<a href=./$reportdir/input.html>Inputs<a> - <a href=./$reportdir/fieldmap.html>Fieldmap<a> - <a href=./$reportdir/motion.html>Motion&distortion</a> - <a href=./$reportdir/bvecbval.html>  bvec&bval</a> - <a href=./$reportdir/stats.html> Statistics</a> - <a href=./report.html><u>Results</u></a> - <a href=./$reportdir/log.html>log</a><br style=\"clear:right\"><hr>" >> report.html
echo "..not yet run" >> report.html

echo "<a href=./input.html>Inputs<a> - <a href=./fieldmap.html>Fieldmap<a> - <a href=./motion.html>Motion&distortion</a> - <a href=./bvecbval.html>bvec&bval</a> - <a href=./stats.html><u>Statistics</u></a> - <a href=../report.html>Results</a> - <a href=./log.html>log</a><br style=\"clear:right\"><hr>" >> $reportdir/stats.html
echo "..not yet run" >> $reportdir/stats.html

echo "<a href=./input.html>Inputs<a> - <a href=./fieldmap.html>Fieldmap<a> - <a href=./motion.html>Motion&distortion</a> - <a href=./bvecbval.html><u>bvec&bval</u></a> - <a href=./stats.html>Statistics</a> - <a href=../report.html>Results</a> - <a href=./log.html>log</a><br style=\"clear:right\"><hr>" >> $reportdir/bvecbval.html
echo "..not yet run" >> $reportdir/bvecbval.html

echo "<a href=./input.html>Inputs<a> - <a href=./fieldmap.html>Fieldmap<a> - <a href=./motion.html><u>Motion&distortion</u></a> - <a href=./bvecbval.html>bvec&bval</a> - <a href=./stats.html>Statistics</a> - <a href=../report.html>Results</a> - <a href=./log.html>log</a><br style=\"clear:right\"><hr>" >> $reportdir/motion.html
echo "..not yet run" >> $reportdir/motion.html

echo "<a href=./input.html>Inputs<a> - <a href=./fieldmap.html><u>Fieldmap</u></a> - <a href=./motion.html>Motion&distortion</a> - <a href=./bvecbval.html>bvec&bval</a> - <a href=./stats.html>Statistics</a> - <a href=../report.html>Results</a> - <a href=./log.html>log</a><br style=\"clear:right\"><hr>" >> $reportdir/fieldmap.html

echo "..not yet run" >> $reportdir/fieldmap.html

echo "<a href=./input.html><u>Inputs</u></a> - <a href=./fieldmap.html>Fieldmap<a> - <a href=./motion.html>Motion&distortion</a> - <a href=./bvecbval.html>bvec&bval</a> - <a href=./stats.html>Statistics</a> - <a href=../report.html>Results</a> - <a href=./log.html>log</a><br style=\"clear:right\"><hr>" >> $reportdir/input.html

echo "<b>Inputs </b><BR><BR>" >> $reportdir/input.html
echo "<i>DWI 4D data </i>: $dti <BR>" >> $reportdir/input.html
echo "<i>bvecs </i>: $bvec <BR>" >> $reportdir/input.html
echo "<i>bvals </i>: $bval <BR><BR>" >> $reportdir/input.html

if [ $FC = 1 ] ; then
 echo "<i>Method of distortion correction</i>: data-driven distortion correction (using Fugue and Eddy_correct in FSL) <BR>" >> $reportdir/input.html
 echo "<i>Dwell time [sec] </i>: $esp  <BR>" >> $reportdir/input.html
 echo "<i>Fieldmap </i>: $dph <BR>" >> $reportdir/input.html
 echo "<i>Fieldmap magnitude </i>: $mag <BR>" >> $reportdir/input.html
 echo "<i>Unwarp direction </i>: $ud <BR><BR>" >> $reportdir/input.html
fi

if [ $FC = 2 ] ; then
 echo "<i>Method of distortion correction</i>: model-based distortion correction (using topup and eddy in FSL) <BR>" >> $reportdir/input.html
 echo "<i>Phase-reversed dwi 4D image </i>: $dtir <BR>" >> $reportdir/input.html
 echo "<i>Phase encode direction </i>: $ud <BR><BR>" >> $reportdir/input.html
 if [ "$esp" != "" ] ; then echo "<i>Dwell time [sec] </i>: $esp  <BR>" >> $reportdir/input.html; fi
fi

echo "<a href=./input.html>Inputs</a> - <a href=./fieldmap.html>Fieldmap<a> - <a href=./motion.html>Motion&distortion</a> - <a href=./bvecbval.html>bvec&bval</a> - <a href=./stats.html>Statistics</a> - <a href=../report.html>Results</a> - <a href=./log.html><u>log</u></a><BR><hr><pre>" >> $reportdir/log.html

T -e "${CMD} ${inparg}"
T -e "Started at `date +'%Y-%m-%d %H:%M:%S %z'`"
T -e "Hostname : `hostname`"
T -e "Architecture : `uname -a`"
T -e "Logfile : $outdir/$LF"
T -e "DTI_PREPROCESS : $DTI_PREPROCESS"
T -e "Version: $VERSION"
T -e "FSLDIR : ${FSLDIR}"
fslversion=`cat ${FSLDIR}/etc/fslversion`
T -e "FSL version : $fslversion"
if [ `echo $fslversion | head -c 1` -lt 5 ]; then echo "Error: dti_preprocess requires FSL 5.0 or later version."; exit 1; fi
T -e "Output dir : $outdir"
T -e "Directory space:"
T -e "`df -h $outdir`"

#########################################################
# Initializtion                                         #
#########################################################
T fslroi $dti $tmpdir/ED_D_example_dti $refvol 1
if [ "x${maskd}" = "x" ]; then
 T bet $tmpdir/ED_D_example_dti $tmpdir/ED_D_example_dti_brain -f 0.2 -m
else
 T fslmaths $tmpdir/ED_D_example_dti -mas $maskd $tmpdir/ED_D_example_dti_brain
 T fslmaths $maskd $tmpdir/ED_D_example_dti_brain_mask
fi
if [ "$FC" = 0 ] ; then
 T fslmaths $tmpdir/ED_D_example_dti_brain nodif_brain
 T fslmaths $tmpdir/ED_D_example_dti_brain_mask nodif_brain_mask
fi

#########################################################
# Eddy current distortion correction using eddy_correct #
#########################################################
if [ $EC != 0 ] ; then
 cat $reportdir/motion.html | head -n 6 > $reportdir/tmpmotion.html
 mv $reportdir/tmpmotion.html $reportdir/motion.html

 # Make movie of original dwi
 echo "<B>Motion and distortion</B><BR><BR>"  >> $reportdir/motion.html
 if [ $EC != 2 ] ; then
  T nii2gif $dti ${reportdir}/data_D_movie.gif -T 100
  echo "<I>Original distorted data</I><BR>"  >> $reportdir/motion.html
  echo "<IMG src=./data_D_movie.gif  width=300 height=100 border=0><BR><BR>" >> $reportdir/motion.html

  # Eddy_correct
  T cp $bval bvals
  T cp $bvec bvecs
  if [ $FLIRT = 0 ] ; then # use mcflirt
   if [ -e $tmpdir/data_UD_ec.mat ]; then \rm -Rf $tmpdir/data_UD_ec.mat;fi
   T mcflirt -in $dti -o ${tmpdir}/data_UD_ec -report -stages $MCFLIRT -mats -dof 12 -rmsabs -rmsrel -reffile $tmpdir/ED_D_example_dti;
  elif [ $FLIRT = 1 ] ; then # use flirt
   mkdir -p $tmpdir/data_UD_ec.mat
   i=0
   while [ $i -lt $dtidim4 ]; do
   j=`zeropad $i 4`
   T fslroi $dti $tmpdir/vol_$j $i 1
   T flirt -in $tmpdir/vol_$j -ref $tmpdir/ED_D_example_dti -nosearch -paddingsize 1 -omat $tmpdir/data_UD_ec.mat/MAT_$j -interp $INTERP -o $tmpdir/vol_$j
   i=`expr $i + 1`
   done
   T fslmerge -t $tmpdir/data_UD_ec `imglob -oneperimage $tmpdir/vol_????.*`
   T imrm $tmpdir/vol_????.*
  fi
 fi

fi

#########################################################
# FUGUE                                                 #
#########################################################
if [ $FC = 1 ] ; then
 T fslmaths $dph $tmpdir/FM_UD_fmap
 T fslmaths $mag $tmpdir/FM_UD_fmap_mag
 if [ "x${maskf}" = "x" ]; then
  T bet $tmpdir/FM_UD_fmap_mag $tmpdir/FM_UD_fmap_mag_brain -m -f 0.3
 else
  T fslmaths $tmpdir/FM_UD_fmap_mag -mas $maskf $tmpdir/FM_UD_fmap_mag_brain; T fslmaths $maskf -bin $tmpdir/FM_UD_fmap_mag_brain_mask
 fi
 T fslmaths $tmpdir/FM_UD_fmap_mag_brain_mask -ero  $tmpdir/FM_UD_fmap_mag_brain_mask
 T fslstats $tmpdir/FM_UD_fmap -k $tmpdir/FM_UD_fmap_mag_brain_mask -P 50
 val=`fslstats $tmpdir/FM_UD_fmap -k $tmpdir/FM_UD_fmap_mag_brain_mask -P 50`
 T fslmaths $tmpdir/FM_UD_fmap -sub $val  $tmpdir/FM_UD_fmap
 T fugue -i $tmpdir/FM_UD_fmap_mag_brain --loadfmap=$tmpdir/FM_UD_fmap --mask=$tmpdir/FM_UD_fmap_mag_brain_mask --dwell=$esp -w $tmpdir/FM_D_fmap_mag_brain --nokspace --unwarpdir=$ud

 if [ "$reg" != "0" ] ; then
  T flirt -in $tmpdir/ED_D_example_dti_brain -ref $tmpdir/FM_D_fmap_mag_brain -omat $tmpdir/ED_2_FM.mat -o $tmpdir/grot -dof 6
  T convert_xfm -omat $tmpdir/FM_2_ED.mat -inverse $tmpdir/ED_2_FM.mat
 else
  echo "1 0 0 0" > $tmpdir/ED_2_FM.mat
  echo "0 1 0 0" >> $tmpdir/ED_2_FM.mat
  echo "0 0 1 0" >> $tmpdir/ED_2_FM.mat
  echo "0 0 0 1" >> $tmpdir/ED_2_FM.mat
  cp $tmpdir/ED_2_FM.mat $tmpdir/FM_2_ED.mat
 fi;

 T flirt -in $tmpdir/FM_UD_fmap -ref $tmpdir/ED_D_example_dti -init $tmpdir/FM_2_ED.mat -applyxfm -out $tmpdir/ED_UD_fmap
 T flirt -in $tmpdir/FM_UD_fmap_mag -ref $tmpdir/ED_D_example_dti -init $tmpdir/FM_2_ED.mat -applyxfm -out $tmpdir/ED_UD_fmap_mag
 T flirt -in $tmpdir/FM_UD_fmap_mag_brain -ref $tmpdir/ED_D_example_dti -init $tmpdir/FM_2_ED.mat -applyxfm -out $tmpdir/ED_UD_fmap_mag_brain
 T flirt -in $tmpdir/FM_UD_fmap_mag_brain_mask -ref $tmpdir/ED_D_example_dti -init $tmpdir/FM_2_ED.mat -applyxfm -out $tmpdir/ED_UD_fmap_mag_brain_mask
 T fslmaths $tmpdir/FM_UD_fmap_mag_brain_mask -thr 0.5 -bin $tmpdir/FM_UD_fmap_mag_brain_mask -odt float
 T fugue --loadfmap=$tmpdir/ED_UD_fmap --dwell=$esp -i $tmpdir/ED_D_example_dti -u $tmpdir/ED_UD_example_dti --unwarpdir=$ud --saveshift=$tmpdir/ED_UD_shift --mask=$tmpdir/ED_UD_fmap_mag_brain_mask
 T convertwarp -s $tmpdir/ED_UD_shift -o $tmpdir/ED_UD_warp -r $tmpdir/ED_D_example_dti --shiftdir=$ud
 T fslmaths $tmpdir/ED_UD_example_dti $outdir/nodif
 T applywarp -i $tmpdir/ED_D_example_dti_brain -o $outdir/nodif_brain -w $tmpdir/ED_UD_warp -r $tmpdir/ED_D_example_dti --abs
 #--mask=$tmpdir/ED_UD_fmap_mag_brain_mask
 T fslmaths $outdir/nodif_brain -bin  $outdir/nodif_brain_mask

 cat $reportdir/fieldmap.html | head -n 6 > $reportdir/tmpfieldmap.html
 mv $reportdir/tmpfieldmap.html $reportdir/fieldmap.html
 T fslstats $tmpdir/FM_UD_fmap -k $tmpdir/FM_UD_fmap_mag_brain_mask -P 1 -P 99
 V=(`fslstats $tmpdir/FM_UD_fmap -k $tmpdir/FM_UD_fmap_mag_brain_mask -P 1 -P 99`)
 T fslmaths $tmpdir/FM_UD_fmap -mul -1 grot
 T overlay 1 0 $tmpdir/FM_UD_fmap_mag -a $tmpdir/FM_UD_fmap 0 ${V[1]} grot 0 `echo ${V[0]} | tr -d -` grot
 T nii2gif grot $reportdir/fmap+mag.gif -s 3
 T /bin/cp ${FSLDIR}/etc/luts/ramp.gif $reportdir/ramp.gif
 T /bin/cp ${FSLDIR}/etc/luts/ramp2.gif $reportdir/ramp2.gif
 echo "<B>Fieldmap </B><BR><BR>"  >> $reportdir/fieldmap.html
 echo "<I>Fieldmap overlaid on magnitude image </I><BR><FONT size=1>`round ${V[0]} 0`<IMG src=./ramp2.gif width=30 height=10 border=0 align=top><IMG src=./ramp.gif width=30 height=10 border=0 align=top >`round ${V[1]} 0`[rad/sec]</FONT><BR>"  >> $reportdir/fieldmap.html
 echo "<IMG src= "./fmap+mag.gif" width="300" height="100" border="0"><BR><BR>" >> $reportdir/fieldmap.html
 T imln $tmpdir/FM_UD_fmap fields_rads
 T imln $tmpdir/FM_UD_fmap_mag fields_mag
 T fslstats $tmpdir/ED_UD_shift -k $tmpdir/ED_UD_fmap_mag_brain_mask -P 1 -P 99
 V=(`fslstats $tmpdir/ED_UD_shift -k $tmpdir/ED_UD_fmap_mag_brain_mask -P 1 -P 99`)
 T fslmaths $tmpdir/ED_UD_shift -mul -1 grot
 T overlay 1 0 $tmpdir/ED_UD_fmap_mag_brain -a $tmpdir/ED_UD_shift 0 ${V[1]} grot 0 `echo ${V[0]} | tr -d -` grot
 T nii2gif grot $reportdir/ED_UD_shift+mag.gif -s 3
 echo "<I>Unwarping shift map </I><BR><FONT size=1>`round ${V[0]} 0` <IMG src=./ramp2.gif width=30 height=10 border=0 align=top><IMG src=./ramp.gif width=30 height=10 border=0 align=top >`round ${V[1]} 0`[voxel]</FONT><BR>"  >> $reportdir/fieldmap.html
 echo "<IMG src="./ED_UD_shift+mag.gif" width="300" height="100" border="0"><BR><BR>" >> $reportdir/fieldmap.html

 T flirt -in $tmpdir/FM_D_fmap_mag_brain -ref $tmpdir/ED_D_example_dti_brain -applyxfm -init $tmpdir/FM_2_ED.mat -o grot
 T nii2gif grot $reportdir/FM_D_fmap_mag_brain.gif -s 3
 T nii2gif $tmpdir/ED_D_example_dti_brain $reportdir/ED_D_example_dti_brain.gif -s 3
 T whirlgif -o $reportdir/ED_FM_D_movie2.gif -loop -time 50 $reportdir/ED_D_example_dti_brain.gif $reportdir/FM_D_fmap_mag_brain.gif
 echo "<I>Registration of brain images between original b=0 and estimated from fieldmap </I><BR> "  >> $reportdir/fieldmap.html
 echo "<IMG src= "./ED_FM_D_movie2.gif" width="300" height="100" border="0"><BR><BR>" >> $reportdir/fieldmap.html

 cat report.html | head -n 6 > tmpreport.html; mv tmpreport.html report.html
 echo "<B>B=0 image</B><BR><BR>"  >> report.html
 T nii2gif $tmpdir/ED_D_example_dti $reportdir/ED_D_example_dti.gif
 T nii2gif $tmpdir/ED_UD_example_dti $reportdir/ED_UD_example_dti.gif
 T fslstats $tmpdir/ED_UD_fmap_mag_brain.nii.gz -P 20 -P 90
 val=`fslstats $tmpdir/ED_UD_fmap_mag_brain.nii.gz -P 20 -P 90`
 T -e nii2gif $tmpdir/ED_UD_fmap_mag $reportdir/ED_UD_fmap_mag.gif -i '"'$val'"'
 nii2gif $tmpdir/ED_UD_fmap_mag $reportdir/ED_UD_fmap_mag.gif -i "$val"
 T whirlgif -o $reportdir/ED_UD_movie3.gif -loop -time 50  $reportdir/ED_D_example_dti.gif $reportdir/ED_UD_example_dti.gif $reportdir/ED_UD_fmap_mag.gif
 echo "<I>Uncorrected, corrected b=0 images and a fieldmap magnitude image </I><BR>"  >> report.html
 echo "<IMG src=./${reportdir}/ED_UD_movie3.gif width=300 height=100 border=0><BR><BR>" >> report.html

 # Reslice images if eddy_correct was performed
 if [ $EC = 0 ] ; then
  finish_dti_preprocess;
 else
  i=0
  while [ $i -lt $dtidim4 ]; do
   j=`zeropad $i 4`
   T fslroi $dti $tmpdir/vol_$j $i 1
   T applywarp -i $tmpdir/vol_$j -o $tmpdir/vol_$j --premat=$tmpdir/data_UD_ec.mat/MAT_$j -w $tmpdir/ED_UD_warp -r $tmpdir/ED_D_example_dti --abs --mask=$tmpdir/ED_UD_fmap_mag_brain_mask
   i=`expr $i + 1`
  done;
  T fslmerge -t $tmpdir/data_UD_fmec `imglob -oneperimage $tmpdir/vol_????.*`
  T imrm $tmpdir/vol_????*
 fi

fi

#########################################################
# TOPUP and EDDY                                        #
#########################################################
if [ $FC = 2 ] ; then
 if [ $EC != 0 ] ; then
  if [ $v != 0 ] ; then
    echo "paste $bvec $bvecr > bvecs"; echo ""
    echo "paste $bval $bvalr > bvals"; echo ""
  fi
  paste $bvec $bvecr > bvecs
  paste $bval $bvalr > bvals
 fi

 if [ "$esp" != "" ] ; then
  if [ "$ud" = "x" ] ; then uddim=dim1; else uddim=dim2;fi
  EF=`fslval $dti $uddim`
  totalreadouttime=`echo "$esp * ($EF - 1)" | bc`
 fi
 if [ "$ud" = "x" ]; then
  echo "-1 0 0 $totalreadouttime" > $tmpdir/acq_params.txt;
  echo "1 0 0 $totalreadouttime" >> $tmpdir/acq_params.txt;
 elif [ "$ud" = "y" ]; then
  echo "0 -1 0 $totalreadouttime" > $tmpdir/acq_params.txt;
  echo "0 1 0 $totalreadouttime" >> $tmpdir/acq_params.txt;
 fi

 dim1=`fslval $dti dim1`; dim2=`fslval $dti dim2`; dim3=`fslval $dti dim3`; dim4=`fslval $dti dim4`;
 dim4r=`fslval $dtir dim4`; dtidim4=`echo "$dim4 + $dim4r" | bc`
 # test if the number of slices (dim3) is odd or even
 dim3s=0
 if [ `expr $dim3 % 2` -eq 1 ]; then
  dim3s=1
  dim3=`expr $dim3 - 1`
  T -e "Delete the lowest slice since topup does not prefer odd number of slices."
 fi

 T fslroi $dti $tmpdir/b0_1 0 $dim1 0 $dim2 $dim3s $dim3 0 1;
 T fslroi $dtir $tmpdir/b0_2 0 $dim1 0 $dim2 $dim3s $dim3 0 1;
 T fslmerge -t $tmpdir/b0_merge $tmpdir/b0_1 $tmpdir/b0_2
 b0APPA=$tmpdir/b0_merge

 T fslroi $dti $tmpdir/dwi1 0 $dim1 0 $dim2 $dim3s $dim3;
 T fslroi $dtir $tmpdir/dwi2 0 $dim1 0 $dim2 $dim3s $dim3;
 dti1=$tmpdir/dwi1; dti2=$tmpdir/dwi2
 T fslmerge -t $tmpdir/data_D $dti1 $dti2;
 dti=$tmpdir/data_D

 T nii2gif $dti ${reportdir}/data_D_movie.gif -T 100
 echo "<I>Original distorted data</I><BR>"  >> $reportdir/motion.html
 echo "<IMG src=./data_D_movie.gif  width=300 height=100 border=0><BR><BR>" >> $reportdir/motion.html

 # topup
 T topup --imain=$b0APPA --datain=$tmpdir/acq_params.txt --config=b02b0.cnf --out=$tmpdir/topup_results --fout=$tmpdir/field_hz --iout=$tmpdir/b0_topup_merge -v;
 T fslmaths $tmpdir/b0_topup_merge -Tmean $tmpdir/b0_topup_mean
 T fslcpgeom $tmpdir/b0_1 $tmpdir/b0_topup_mean
 T fslmaths $tmpdir/field_hz -mul `echo "scale=20; 4*a(1) * 2" | bc -l` $tmpdir/field_rads
 T imcp $tmpdir/b0_topup_mean nodif;
 T bet nodif nodif_brain -m -f 0.3
 T applytopup --imain=$dti1 --inindex=1 --datain=$tmpdir/acq_params.txt --topup=$tmpdir/topup_results --out=$tmpdir/dwi1_topupapplied --interp=spline --method=jac
 T applytopup --imain=$dti2 --inindex=2 --datain=$tmpdir/acq_params.txt --topup=$tmpdir/topup_results --out=$tmpdir/dwi2_topupapplied --interp=spline --method=jac
 T fslmerge -t $tmpdir/dwi_topupapplied $tmpdir/dwi1_topupapplied $tmpdir/dwi2_topupapplied

 # Make report
 cat $reportdir/fieldmap.html | head -n 6 > $reportdir/tmpfieldmap.html
 mv $reportdir/tmpfieldmap.html $reportdir/fieldmap.html
 T fslstats $tmpdir/field_rads -k nodif_brain_mask -P 1 -P 99
 V=(`fslstats $tmpdir/field_rads -k nodif_brain_mask -P 1 -P 99`)
 T fslmaths $tmpdir/field_rads -mul -1 grot
 T overlay 1 0 nodif_brain -a $tmpdir/field_rads 0 ${V[1]} grot 0 `echo ${V[1]} | tr -d -` grot
 T nii2gif grot $reportdir/field+nodif.gif
 T /bin/cp ${FSLDIR}/etc/luts/ramp.gif $reportdir/ramp.gif
 T /bin/cp ${FSLDIR}/etc/luts/ramp2.gif $reportdir/ramp2.gif
 T imln $tmpdir/field_rads field_rads
 T imln $tmpdir/b0_topup_mean field_mag
 echo "<B>Fieldmap</B><BR><BR>" >>  $reportdir/fieldmap.html
 echo "<I>Fieldmap overlaid on nodif image </I><BR><FONT size=1>`round ${V[0]} 0`<IMG src=./ramp2.gif width=30 height=10 border=0 align=top><IMG src=./ramp.gif width=30 height=10 border=0 align=top >`round ${V[1]} 0` [rad/sec]</FONT><BR>"  >> $reportdir/fieldmap.html
 echo "<IMG src= "./field+nodif.gif" width="300" height="100" border="0"><BR><BR>" >> $reportdir/fieldmap.html

 T fugue --loadfmap=$tmpdir/field_rads --dwell=$esp --saveshift=$tmpdir/ED_UD_shift
 T fslstats $tmpdir/ED_UD_shift -R -P 1 -P 99
 V=(`fslstats $tmpdir/ED_UD_shift -R -P 1 -P 99`)
 T fslmaths $tmpdir/ED_UD_shift -mul -1 grot
 T overlay 1 0 nodif_brain -a $tmpdir/ED_UD_shift 0 ${V[1]} grot 0 `echo ${V[0]} | tr -d -` grot
 T nii2gif grot $reportdir/ED_UD_shift+nodif_brain.gif -s 3
 echo "<I>Unwarping shift map </I><BR><FONT size=1>`round ${V[0]} 0` <IMG src=./ramp2.gif width=30 height=10 border=0 align=top> <IMG src=./ramp.gif width=30 height=10 border=0 align=top >`round ${V[1]} 0`[voxels]</FONT><BR>"  >> $reportdir/fieldmap.html
 echo "<IMG src="./ED_UD_shift+nodif_brain.gif" width="300" height="100" border="0"><BR><BR>" >> $reportdir/fieldmap.html

 cat report.html | head -n 6 > tmpreport.html; mv tmpreport.html report.html
 echo "<B>B=0 image</B><BR><BR>"  >> report.html
 T fslmerge -t grot $b0APPA nodif
 T nii2gif grot $reportdir/b0_merge+nodif.gif
 echo "<I>Original b0 images (phase up and down) and corrected b0 image (nodif) </I><BR>"  >> report.html
 echo "<IMG src= "./report/b0_merge+nodif.gif" width="300" height="100" border="0"><BR><BR>" >> report.html

 # Eddy-current distortion correction
 if [ $EC = 0 ] ; then
  finish_dti_preprocess;
 else
  # eddy
  if [ -e $tmpdir/index.txt ]; then rm $tmpdir/index.txt;fi;
  i=0; while [ $i -lt $dim4 ]; do printf "1 ">> $tmpdir/index.txt; i=`expr $i + 1`; done;
  i=0; while [ $i -lt $dim4r ]; do printf "2 ">> $tmpdir/index.txt; i=`expr $i + 1`; done;
  index="--index=${tmpdir}/index.txt";
  if [ -e $tmpdir/session.txt ]; then rm $tmpdir/session.txt;fi;
  i=0; while [ $i -lt $dim4 ]; do printf "1 ">> $tmpdir/session.txt; i=`expr $i + 1`; done;
  i=0; while [ $i -lt $dim4r ]; do printf "2 ">> $tmpdir/session.txt; i=`expr $i + 1`; done;
 session="--session=${tmpdir}/session.txt"; # although the option, --session, was removed from FSL 5.0.9
  T $EDDY --imain=$dti --mask=nodif_brain_mask $index --acqp=$tmpdir/acq_params.txt --bvecs=bvecs --bvals=bvals --topup=$tmpdir/topup_results --out=$tmpdir/data_UD_tued --flm=quadratic $dontpeas $fwhm $session -v;

  if [ `imtest $tmpdir/data_UD_tued` != 1 ] ; then
   T -e "WARNING: eddy failed to handle this data..will continue with flirt"
  fi
  if [ -e $tmpdir/data_UD_tuec.mat ] ; then rm -rf $tmpdir/data_UD_tuec.mat; fi
  T mkdir -p $tmpdir/data_UD_tuec.mat
  if [ $FLIRT = 0 ] ; then # mcflirt
   T mcflirt -in $tmpdir/dwi_topupapplied -o $tmpdir/data_UD_tuec -report -stages $MCFLIRT -mats -dof 12 -rmsabs -rmsrel -reffile nodif;
  elif [ $FLIRT = 1 ] ; then # eddy_correct
   T fslsplit $tmpdir/dwi_topupapplied $tmpdir/vol_ -t
   i=0
   while [ $i -lt $dtidim4 ] ; do
    j=`zeropad $i 4`
    T flirt -in $tmpdir/vol_$j -ref nodif -nosearch -paddingsize 1 -omat $tmpdir/data_UD_tuec.mat/MAT_$j -o $tmpdir/vol_$j -interp $INTERP
    i=`expr $i + 1`
   done
   T fslmerge -t $tmpdir/data_UD_tuec `imglob -oneperimage $tmpdir/vol_????.*`
   imrm `imglob -oneperimage $tmpdir/vol_????.*`
  fi

 fi

fi

#########################################################
# Make motion & distortion page                         #
#########################################################
if [ $EC != 0  ] ; then
 for i in ec fmec tuec tued ; do
  if [ `imtest $tmpdir/data_UD_${i}` = 1 ] ; then
   T nii2gif $tmpdir/data_UD_${i} ${reportdir}/data_UD_${i}_movie.gif -T 100
   if [ $i = ec ] ; then text="Data-based correction (only using eddy_correct)"; elif [ $i = fmec ] ; then text="Data-based correction (using fugue and eddy_correct)"; elif [ $i = tuec ]; then text="Model- and data-based hybrid correction (using topup and eddy_correct)"; elif [ $i = tued ] ; then text="Model-based correction (using topup and eddy)";fi
   echo "<I>$text</I><BR>"  >> $reportdir/motion.html
   echo "<IMG src=./data_UD_${i}_movie.gif  width=300 height=100 border=0><BR><BR>" >> $reportdir/motion.html
  fi
 done

 # Make movement plots
 for i in translation.par rotation.par; do if [ -e $tmpdir/$i ] ; then rm -Rf $tmpdir/$i; fi; done

 zero=`round 0`; pi=$(echo "scale=20; 4*a(1)" | bc -l)

 if [ $EC != 2 ] ; then
  i=0
  while [ $i -lt $dtidim4 ]; do
    j=`zeropad $i 4`
    val=`avscale --allparams $tmpdir/data_UD_ec.mat/MAT_$j | head -13 | tail -7 | cut -d "=" -f 2 | grep [0-9]`
    echo $val | awk '{print $4,$5,$6}' >> $tmpdir/translation.par
    echo $val | awk '{printf "%f %f %f\n",$1*180/'$pi',$2*180/'$pi',$3*180/'$pi'}' >> $tmpdir/rotation.par
    i=`expr $i + 1`
  done
 elif [ $EC = 2 ] ; then
   if [ "`cat $tmpdir/data_UD_tued.eddy_parameters | awk 'NR==1 {print $1}'`" = 0 ] ; then
    cat $tmpdir/data_UD_tued.eddy_parameters | awk '{print $1,$2,$3}' > $tmpdir/translation.par
    cat $tmpdir/data_UD_tued.eddy_parameters | awk '{printf "%f %f %f\n",$4*180/'$pi',$5*180/'$pi',$6*180/'$pi'}' > $tmpdir/rotation.par
   else
    i=0
    while [ $i -lt $dtidim4 ]; do
     j=`zeropad $i 4`
     val=`avscale --allparams $tmpdir/data_UD_tuec.mat/MAT_$j | head -13 | tail -7 | cut -d "=" -f 2 | grep [0-9]`
     echo $val | awk '{print $4,$5,$6}' >> $tmpdir/translation.par
     echo $val | awk '{printf "%f %f %f\n",$1*180/'$pi',$2*180/'$pi',$3*180/'$pi'}' >> $tmpdir/rotation.par
     i=`expr $i + 1`
    done
   fi
 fi

 T fsl_tsplot -i $tmpdir/translation.par -o $reportdir/translation.png -t "Translation" -y [mm] -x Volume -a x,y,z
 T fsl_tsplot -i $tmpdir/rotation.par -o $reportdir/rotation.png -t "Rotation" -y [degree] -x Volume -a x,y,z

 echo "<I>Estimated motion</I><BR>" >> $reportdir/motion.html
 meandisl=`cat $tmpdir/translation.par | awk 'BEGIN {x=0;N=0};{x=x+($1^2+$2^2+$3^2)^0.5;N=N+1}END {printf("%f",x/N)}'`
 echo "Mean dislocation : $meandisl [mm] <BR>"  >> $reportdir/motion.html
 meansdt=`threecolumnmeansd $tmpdir/translation.par`
 meansdr=`threecolumnmeansd $tmpdir/rotation.par`
 echo "Mean translation: (x y z)=(`echo $meansdt | awk '{print $1,$2,$3}'`) [mm]<BR>"  >> $reportdir/motion.html
 echo "Mean rotation: (x y z)=(`echo $meansdr | awk '{print $1,$2,$3}'`) [degree]<BR><BR>"  >> $reportdir/motion.html
 echo "<IMG src=../$reportdir/translation.png width=600><BR><BR>" >> $reportdir/motion.html
 echo "<IMG src=../$reportdir/rotation.png width=600><BR><BR>" >> $reportdir/motion.html

fi

#########################################################
# Make bvec & bval page                                 #
#########################################################
cat $reportdir/bvecbval.html | head -n 6 > $reportdir/tmpbvecbval.html
mv $reportdir/tmpbvecbval.html $reportdir/bvecbval.html
echo "<B>Statistics of b-value and b-vector </B><BR><BR>"  >> $reportdir/bvecbval.html

T transposematrix bvals $tmpdir/ts_bval
T transposematrix bvecs $tmpdir/ts_bvec

### plot b-value with histogram ###
T bvalhist bvals
T mv bvals_histogram.png $reportdir
echo "<I>Histogram of b-value </I><BR>"  >> $reportdir/bvecbval.html
echo "<IMG src=./bvals_histogram.png width=300><BR><BR>" >> $reportdir/bvecbval.html

### plot b-value and signals ###
#T fslstats $tmpdir/ED_D_example_dti -x
val=`fslstats $tmpdir/ED_D_example_dti -C`
T tsplot $outdir -f $dti -C $val $tmpdir/ts_cogvoxel.txt
T fsl_tsplot -i $tmpdir/ts_cogvoxel.txt,$tmpdir/ts_bval -o $reportdir/ts_signal-bval.png -a Signal,b-value -t ts-signal-bval-plot -x Volume
echo "<I>Time series plot of signal and b-value </I><BR>"  >> $reportdir/bvecbval.html
echo "Time series signal was taken from voxel at $val<BR>" >> $reportdir/bvecbval.html
echo "<IMG src=./ts_signal-bval.png width=600><BR><BR>" >> $reportdir/bvecbval.html

### plot and stats bvec ###
T fsl_tsplot -i $tmpdir/ts_bvec -o $reportdir/ts_bvec.png -a x,y,z -t ts-bvec-plot -x Volume
statsbvec=`threecolumnmeansd $tmpdir/ts_bvec`
T 3dplotbvec bvecs -f
T mv bvecs_3d.gif $reportdir
echo "<I>3D plot of b-vector</I><BR>"  >> $reportdir/bvecbval.html
echo "<IMG src=./bvecs_3d.gif width=300><BR><BR>" >> $reportdir/bvecbval.html
echo "<I>Statistics of b-vector</I><BR>"  >> $reportdir/bvecbval.html
echo "Center of gravity: (x,y,z)=(`echo $statsbvec | awk '{print $1,$2,$3}'`)<BR>" >> $reportdir/bvecbval.html
echo "Standard deviation: (x,y,z)=(`echo $statsbvec | awk '{print $4,$5,$6}'`)<BR><BR>" >> $reportdir/bvecbval.html
echo "<I>Time series plot of b-vector </I><BR>"  >> $reportdir/bvecbval.html
echo "<IMG src=./ts_bvec.png width=600><BR><BR>" >> $reportdir/bvecbval.html


#########################################################
# Make b=0 statistics page                              #
#########################################################
cat $reportdir/stats.html | head -n 6 > $reportdir/tmpstats.html
mv $reportdir/tmpstats.html $reportdir/stats.html
echo "<B>SNR of b=0 images</B><BR><BR>"  >> $reportdir/stats.html
cp $lutpng $reportdir
T -e ${DTI_PREPROCESS}/bin/dwistats $dti bvals ${tmpdir}/data_D
outdwistats=`${DTI_PREPROCESS}/bin/dwistats $dti bvals ${tmpdir}/data_D`
T -e $outdwistats
nvol=`echo $outdwistats | awk '{print $1}'`; snr=`echo $outdwistats | awk '{print $2}'`
T -e nii2gif ${tmpdir}/data_D_snr ${reportdir}/data_D_snr.gif -l $lut -i "1 20"
nii2gif ${tmpdir}/data_D_snr ${reportdir}/data_D_snr.gif -l $lut -i "0 20"
echo "<I>Original distorted</I><BR>"  >> $reportdir/stats.html
echo "Number of b=0 volume = $nvol <BR>" >> $reportdir/stats.html
echo "Averaged SNR in brain region = $snr <BR>" >> $reportdir/stats.html
echo "<FONT size=1>0<IMG src=./rainbow.png width=30 height=10 border=0 align=top>20</FONT><BR>" >> $reportdir/stats.html
echo "<IMG src=./data_D_snr.gif  width=300 height=100 border=0><BR><BR>" >> $reportdir/stats.html

for i in ec fmec tuec tued ; do
 if [ `imtest $tmpdir/data_UD_${i}` = 1 ] ; then
   T -e ${DTI_PREPROCESS}/bin/dwistats $tmpdir/data_UD_${i} bvals ${tmpdir}/data_UD_${i}
   outdwistats=`${DTI_PREPROCESS}/bin/dwistats $tmpdir/data_UD_${i} bvals ${tmpdir}/data_UD_${i}`
   T -e $outdwistats
   nvol=`echo $outdwistats | awk '{print $1}'`; snr=`echo $outdwistats | awk '{print $2}'`
   T -e nii2gif $tmpdir/data_UD_${i}_snr ${reportdir}/data_UD_${i}_snr.gif -l $lut -i "0 20"
   nii2gif $tmpdir/data_UD_${i}_snr ${reportdir}/data_UD_${i}_snr.gif -l $lut -i "0 20"
   if [ $i = ec ] ; then text="Data-based correction (only using eddy_correct)"; elif [ $i = fmec ] ; then text="Data-based correction (using fugue and eddy_correct)"; elif [ $i = tuec ]; then text="Model- and data-based hybrid correction (using topup and eddy_correct)"; elif [ $i = tued ] ; then text="Model-based correction (using topup and eddy)";fi
   echo "<I>$text</I><BR>"  >> $reportdir/stats.html
   echo "Number of b=0 volume = $nvol <BR>" >> $reportdir/stats.html
   echo "Averaged SNR in brain region = $snr <BR>" >> $reportdir/stats.html
   echo "<FONT size=1>0<IMG src=./rainbow.png width=30 height=10 border=0 align=top>20</FONT><BR>" >> $reportdir/stats.html
   echo "<IMG src=./data_UD_${i}_snr.gif  width=300 height=100 border=0><BR><BR>" >> $reportdir/stats.html
 fi
done

#########################################################
# Calculation of DTI                                    #
#########################################################
if [ `cat report.html | wc -l` -lt 8 ] ;then cat report.html | head -n 6 > tmpreport.html; mv tmpreport.html report.html; fi

echo "<B>DTI FA image</B><BR><BR>"  >> report.html
dtimask=nodif_brain_mask;
T dtifit -k $dti -o $tmpdir/dti_D -b bvals -r bvecs -m $tmpdir/ED_D_example_dti_brain_mask --sse
sse=`fslstats $tmpdir/dti_D_sse -k $tmpdir/ED_D_example_dti_brain_mask -M`
T nii2gif $tmpdir/dti_D_FA $reportdir/dti_D_FA.gif
echo "<I>Oiginal distorted data</I><BR>"  >> report.html
echo "Averaged sum of squre errors :  $sse<BR>"  >> report.html
echo "<IMG src=./$reportdir/dti_D_FA.gif width=300 height=100 border=0><BR><BR>" >> report.html

for i in ec fmec tuec tued ; do
 if [ `imtest $tmpdir/data_UD_${i}` -eq 1 ] ; then
  T dtifit -k $tmpdir/data_UD_$i -o $tmpdir/dti_UD_$i -b bvals -r bvecs -m $dtimask --sse
  T nii2gif $tmpdir/dti_UD_${i}_FA $reportdir/dti_UD_${i}_FA.gif
  sse=`fslstats $tmpdir/dti_UD_${i}_sse -k nodif_brain_mask -M`
  if [ $i = ec ] ; then text="Data-based correction (only using eddy_correct)";
  elif [ $i = fmec ] ; then text="Data-based correction (using fugue and eddy_correct)";
  elif [ $i = tuec ] ; then text="Model- and data-based hybrid correction (using topup and eddy_correct)";
  elif [ $i = tued ] ; then text="Model-based correction (using topup and eddy)";
  fi
  echo "<I>$text </I><BR>"  >> report.html
  echo "Averaged sum of squre errors :  $sse<BR>"  >> report.html
  echo "<IMG src=./$reportdir/dti_UD_${i}_FA.gif width=300 height=100 border=0><BR><BR>" >> report.html
 fi
done

#########################################################
# Generate motion corrected bvecs                       #
#########################################################
for i in tued tuec fmec ec ; do
 if [ `imtest $tmpdir/data_UD_${i}` = 1 ] ; then
   imln ${tmpdir}/data_UD_${i} data
   if [ $i = ec ] ; then text="Data-based correction (only using eddy_correct + bvecs corrected for motion)";
   elif [ $i = fmec ] ; then text="Data-based correction (using fugue and eddy_correct + bvecs corrected for motion)";
   elif [ $i = tuec ] ; then text="Model- and data-based hybrid correction (using topup and eddy_correct + bvecs corrected for motion)";
   elif [ $i = tued ] ; then text="Model-based correction (using topup and eddy + bvecs corrected for motion)";
   fi
   break
 fi
done

T ${DTI_PREPROCESS}/bin/bvecrot $outdir
T dtifit -k data -o $tmpdir/bvecrot/dti -b $tmpdir/bvecrot/bvals -r  $tmpdir/bvecrot/bvecs -m nodif_brain_mask --sse
$DTI_PREPROCESS/bin/nii2gif $tmpdir/bvecrot/dti_FA report/dti_UD_bvecrot_FA.gif
sse=`fslstats $tmpdir/bvecrot/dti_sse -k nodif_brain_mask -M`
echo "<I>$text </I><BR>"  >> report.html
echo "Averaged sum of squre errors : $sse <BR>"  >> report.html
echo "<IMG src=./report/dti_UD_bvecrot_FA.gif width=300 height=100 border=0><BR><BR>" >> report.html

fsl_tsplot -i $tmpdir/bvecrot/ts_bvecrot -o report/ts_bvecrot.png -a x,y,z -t ts-motion-correced-bvec-plot -x Volume
statsbvec=`threecolumnmeansd $tmpdir/bvecrot/ts_bvecrot`
echo "<I>Statistics of motion-corrected b-vector</I><BR>"  >> report/bvecbval.html
echo "Center of gravity: (x,y,z)=(`echo $statsbvec | awk '{print $1,$2,$3}'`)<BR>" >> report/bvecbval.html
echo "Standard deviation: (x,y,z)=(`echo $statsbvec | awk '{print $4,$5,$6}'`)<BR><BR>" >> report/bvecbval.html
echo "<I>Time series plot of motion-corrected b-vector </I><BR>"  >> report/bvecbval.html
echo "<IMG src=./ts_bvecrot.png width=600><BR><BR>" >> report/bvecbval.html

for i in dti_FA dti_MD dti_V1 dti_V2 dti_V3 dti_S0 dti_MO dti_L1 dti_L2 dti_L3 dti_sse; do
 if [ `imtest $i` = 1 ] ; then imrm $i ; fi
done
for j in FA MD V1 V2 V3 S0 MO L1 L2 L3 sse; do imln $tmpdir/bvecrot/dti_${j} dti_${j}; done
rm bvecs
ln -s $tmpdir/bvecrot/bvecs bvecs

#########################################################
# Registration to HCP pipeline                          #
#########################################################
if [ "$hcp" != "" ] ; then
 T ${DTI_PREPROCESS}/bin/regdtiprep2hcp $outdir $hcp
fi

#########################################################
# Finish                                                #
#########################################################
finish_dti_preprocess;
